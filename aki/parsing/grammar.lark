immediate: (function | exprblock)*

?start: toplevel*

?toplevel: function | decorator | exprblock

?exprblock: statementblock
    | singexpr

?function: "def" NAME optsignature exprblock -> funcdef
?decorator: "@" NAME optsignature exprblock -> decoratordef

?statementblock: "{" statements "}"
?statements: statement (";"? statement)*

?statement: function
    | atom_expr "=" exprblock -> assignment
    | singexpr

?singexpr: expression

// expressions that return no value

?nonvalue: "return" exprblock -> return
    | "break" (NAME)? -> break
    | "continue" (NAME)? ->continue

// expressions that return a value
   
?expression: "if" exprblock exprblock ("else" exprblock)? -> ifexpr
    | "when" exprblock exprblock ("else" exprblock)? -> whenexpr
    | "while" exprblock exprblock -> whileexpr
    | "for" NAME "in" exprblock exprblock -> forexpr
    | "with" NAME "as" exprblock exprblock -> withexpr
    | nonvalue
    | comparison
    | expression comparisons comparison -> compop
        
!comparisons: "==" | "!=" | ">=" | "<=" | ">" | "<"

?comparison: product
    | comparison products product -> prodop

!products: ">>" | "<<" | "+" | "-" | "&" | "|" | "^"

?product: unary
    | product muldivs unary -> muldivop

!muldivs: "*"|"/"

?unary: unops atom_expr -> unop
    | atom_expr

!unops: "-"

?atom_expr: atom signature -> call
    | atom accessor -> slice
    | atom "." NAME -> attr 
    | atom

?atom: number
    | NAME -> var_ref
    | "(" expression ")"
    | dict
    | list
    | tuple

number: FLOAT16 -> float16
    | FLOAT32 -> float32
    | FLOAT64 -> float64
    | INT64 -> signed_integer
    | UINT64 -> unsigned_integer
    | INF -> inf
    | NAN -> nan
    | (TRUE|FALSE) -> bool

?optsignature: (signature)?

?signature: "(" (vardec ("," vardec)?)? ")" varsig?
?vardec: NAME (varsig)?
?varsig: ":" vartype
?vartype: NAME
    | NAME list

?accessor: "[" (singexpr (":" singexpr (":" singexpr)?)?)? "]"

?dict: "{" keyvalue ("," keyvalue)? "}"
?keyvalue: (number|NAME|STRING) ":" singexpr
?tuple: "(" (singexpr ",")+ ")"
?list: "[" singexpr ("," singexpr)? "]"


STRING: /".*"/
FLOAT64.1: /\d+\.\d*(_D)?/
FLOAT32.2: /\d+\.\d*_F/
FLOAT16.2: /\d+\.\d*_H/
INT64: /\d+/
UINT64: /\d+_U/
INT32: /\d+_I32/
UINT32: /\d+_U32/
INT16: /\d+_I16/
UINT16: /\d+_U16/
BYTE: /\d+_I8/
UBYTE: /\d+_U8/
INF: ".INF"
NAN: ".NAN"

TRUE: "True"
FALSE: "False"

%import common.CNAME -> NAME
%import common.WS
%ignore WS
%ignore "\n"